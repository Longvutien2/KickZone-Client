// components/PaymentQR.tsx
'use client';
import { useState, useEffect, FC, useRef } from 'react';
import { checkPaymentStatus, getListOrders } from '@/api/payment';
import { Order } from '@/models/payment';
import { Spin, Alert, Result, Card } from 'antd';
import { addNotificationSlice } from '@/features/notification.slice';
import { useDispatch } from 'react-redux';
import { Notification } from '@/models/notification';
import { toast } from 'react-toastify';
import { useAppDispatch } from '@/store/hook';
import { BankOutlined } from '@ant-design/icons';

interface PaymentQRProps {
    amount: number;
    userId: string;
    bookingId?: string;
    description: string;
    qrContent: string;
    orderId: string;
    onSuccess?: (success: boolean) => void;
    orderCreated?: boolean;
    fieldData?: any; // Th√™m fieldData ƒë·ªÉ c√≥ th√¥ng tin v·ªÅ s√¢n
    newOrder?: any; // Th√™m newOrder ƒë·ªÉ c√≥ th√¥ng tin v·ªÅ ƒë∆°n h√†ng
    selectedPayment?: string;
}

const PaymentQR: FC<PaymentQRProps> = ({
    orderId,
    userId,
    amount,
    qrContent,
    description,
    onSuccess,
    orderCreated = false,
    fieldData,
    newOrder,
    selectedPayment
}) => {
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState(false);
    const [notificationSent, setNotificationSent] = useState(false); // Th√™m state ƒë·ªÉ theo d√µi vi·ªác g·ª≠i th√¥ng b√°o
    
    // S·ª≠ d·ª•ng useRef ƒë·ªÉ theo d√µi interval v√† tr·∫°ng th√°i mount
    const intervalIdRef = useRef<NodeJS.Timeout | null>(null);
    const isMounted = useRef(true);
    const dispatch = useAppDispatch();

    const convertDescription = (description: string) => {
        let converted = description
            .replace(/S√¢n/g, 'San') // S√¢n ‚Üí San
            .replace(/-/g, '') // Lo·∫°i b·ªè d·∫•u g·∫°ch ngang: 31-05-2025 ‚Üí 31052025
            .replace(/:/g, '') // Lo·∫°i b·ªè d·∫•u hai ch·∫•m: 06:30 ‚Üí 0630
            .replace(/\s-\s/g, ' ') // Lo·∫°i b·ªè " - ": 06:30 - 08:00 ‚Üí 06:30 08:00
            .replace(/\s+/g, ' ') // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
            .trim();

        return converted;
    };

    // H√†m g·ª≠i th√¥ng b√°o
    const sendNotifications = async () => {
        if (notificationSent || !fieldData || !newOrder) return; // N·∫øu ƒë√£ g·ª≠i th√¥ng b√°o ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu, kh√¥ng l√†m g√¨ c·∫£

        try {
            // Th√¥ng tin th√¥ng b√°o cho Manager (qu·∫£n l√Ω s√¢n)
            const managerNotification: Notification = {
                actor: 'manager',
                notificationType: 'new_order',
                title: `${fieldData.field} ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t!`,
                content: `S√¢n c·ªßa b·∫°n ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t v√†o th·ªùi l√∫c: ${fieldData.timeStart}, ng√†y ${fieldData.date}.`,
                orderId: newOrder._id,
                footballfield: fieldData.footballField,
                // targetUser: userId,
            };

            await dispatch(addNotificationSlice(managerNotification));

            // Th√¥ng b√°o cho ng∆∞·ªùi d√πng
            const userNotification: Notification = {
                actor: 'user',
                notificationType: 'field_booked',
                title: 'ƒê·∫∑t s√¢n th√†nh c√¥ng!',
                content: `Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒë·∫∑t s√¢n th√†nh c√¥ng t·∫°i S√¢n b√≥ng ${fieldData.fieldName}.`,
                orderId: newOrder._id,
                footballfield: fieldData.footballField,
                targetUser: userId,
            };

            await dispatch(addNotificationSlice(userNotification));
            setNotificationSent(true); // ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o
            console.log("ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng");
        } catch (error) {
            console.error("L·ªói khi g·ª≠i th√¥ng b√°o:", error);
        }
    };

    useEffect(() => {
        // ƒê√°nh d·∫•u component ƒë√£ mount
        isMounted.current = true;
        // B·∫Øt ƒë·∫ßu ki·ªÉm tra thanh to√°n n·∫øu ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o
        if (orderCreated && orderId && description) {
            // H√†m ki·ªÉm tra thanh to√°n
            const checkPayment = async () => {
                try {
                    console.log("ƒêang ki·ªÉm tra thanh to√°n...");

                    // üöÄ Double check: Ki·ªÉm tra xem c√≥ ai ƒë·∫∑t s√¢n n√†y tr∆∞·ªõc kh√¥ng
                    const { data: allOrders } = await getListOrders();
                    const isFieldAlreadyBooked = allOrders.some((order: any) =>
                        order.fieldName === fieldData?.field &&
                        order.timeStart === fieldData?.timeStart &&
                        order.date === fieldData?.date &&
                        order.paymentStatus === "success" &&
                        order.userId !== userId
                    );
                    
                    if (isFieldAlreadyBooked) {
                        console.log("‚ö†Ô∏è S√¢n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c!");
                        if (intervalIdRef.current) {
                            clearInterval(intervalIdRef.current);
                            intervalIdRef.current = null;
                        }
                        toast.error("Khung gi·ªù n√†y ƒë√£ c√≥ ng∆∞·ªùi ƒë·∫∑t v√† thanh to√°n th√†nh c√¥ng. Vui l√≤ng ch·ªçn s√¢n kh√°c!");
                        // Th√¥ng b√°o l·ªói cho user
                        if (onSuccess) onSuccess(false);
                        return;
                    }

                    // Ki·ªÉm tra thanh to√°n c·ªßa user hi·ªán t·∫°i
                    const result = await checkPaymentStatus(orderId);

                    // Ki·ªÉm tra xem component c√≤n mounted kh√¥ng tr∆∞·ªõc khi c·∫≠p nh·∫≠t state
                    if (isMounted.current) {
                        if (result.data.success && result.data.order) {
                            setSuccess(true);

                            // G·ª≠i th√¥ng b√°o khi thanh to√°n th√†nh c√¥ng
                            await sendNotifications();

                            // Th√¥ng b√°o cho component cha
                            if (onSuccess) onSuccess(true);

                            console.log("Thanh to√°n th√†nh c√¥ng");

                            // D·ª´ng ki·ªÉm tra khi thanh to√°n th√†nh c√¥ng
                            if (intervalIdRef.current) {
                                clearInterval(intervalIdRef.current);
                                intervalIdRef.current = null;
                            }
                        }
                    }
                } catch (err) {
                    console.error('Error checking payment status:', err);
                }
            };

            // G·ªçi l·∫ßn ƒë·∫ßu ngay l·∫≠p t·ª©c
            checkPayment();

            // Sau ƒë√≥ thi·∫øt l·∫≠p interval
            intervalIdRef.current = setInterval(checkPayment, 5000);
        }

        // Cleanup khi component unmount
        return () => {
            isMounted.current = false;
            if (intervalIdRef.current) {
                clearInterval(intervalIdRef.current);
                intervalIdRef.current = null;
            }
        };
    }, [orderCreated, orderId, description, onSuccess]);

    if (loading) return <Spin tip="ƒêang ki·ªÉm tra thanh to√°n..." size="large" />;

    return (
        <div>
            {selectedPayment === "qr" ? (
                <div>
                    <Alert
                        message="H∆∞·ªõng d·∫´n thanh to√°n"
                        description={orderCreated
                            ? "Vui l√≤ng qu√©t m√£ QR ƒë·ªÉ thanh to√°n. H·ªá th·ªëng ƒëang t·ª± ƒë·ªông ki·ªÉm tra tr·∫°ng th√°i thanh to√°n."
                            : "Vui l√≤ng qu√©t m√£ QR ƒë·ªÉ thanh to√°n. Sau khi thanh to√°n, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra v√† x√°c nh·∫≠n."}
                        type="info"
                        showIcon
                        style={{ marginBottom: 16 }}
                    />

                    <div>
                        <div className="flex flex-col items-center mb-4">
                            {/* Hi·ªÉn th·ªã m√£ QR */}
                            <img
                                src={qrContent}
                                alt="QR Code thanh to√°n"
                                className="h-64 w-64 border-gray-200 rounded-md mb-4"
                            />
                        </div>

                        <div className="bg-gray-50 p-4 rounded-lg mb-4 border border-gray-200 text-left">
                            <table className="w-full text-sm">
                                <tbody>
                                    <tr>
                                        <td className="py-1 font-medium w-1/3">Ng√¢n h√†ng:</td>
                                        <td className="text-blue-600">MB Bank</td>
                                    </tr>
                                    <tr>
                                        <td className="py-1 font-medium">S·ªë t√†i kho·∫£n:</td>
                                        <td>29777777729</td>
                                    </tr>
                                    <tr>
                                        <td className="py-1 font-medium">Ch·ªß t√†i kho·∫£n:</td>
                                        <td>V≈® TI·∫æN LONG</td>
                                    </tr>
                                    <tr>
                                        <td className="py-1 font-medium">S·ªë ti·ªÅn:</td>
                                        <td className="text-red-600 font-bold">{amount?.toLocaleString()} VNƒê</td>
                                    </tr>
                                    <tr>
                                        <td className="py-1 font-medium">N·ªôi dung CK:</td>
                                        <td className="font-bold">{convertDescription(description)}</td>
                                    </tr>
                                    <tr>
                                        <td className="py-1 font-medium">M√£ ƒë∆°n h√†ng:</td>
                                        <td className="font-bold">{orderId}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>

                        {orderCreated && (
                            <div className="mt-4 text-center">
                                <Spin tip="ƒêang ki·ªÉm tra thanh to√°n..." />
                                <p className="mt-2 text-gray-500">H·ªá th·ªëng ƒëang t·ª± ƒë·ªông ki·ªÉm tra tr·∫°ng th√°i thanh to√°n c·ªßa b·∫°n...</p>
                            </div>
                        )}
                    </div>
                </div>
            ) : (
                <div className="space-y-4 text-left">
                    {/* Header th√¥ng tin thanh to√°n */}
                    <Card className="border border-gray-200 mb-4 lg:mb-6">
                        <div className="flex items-center gap-3 mb-4">
                            <BankOutlined className="text-blue-500 text-xl" />
                            <h3 className="text-lg font-semibold">
                                {'Thanh to√°n b·∫±ng chuy·ªÉn kho·∫£n'}
                            </h3>
                        </div>

                        {/* Th√¥ng tin thanh to√°n */}
                        <div className="bg-gray-50 p-4 rounded-lg border border-gray-200 ">
                            <table className="w-full text-sm">
                                <tbody>
                                    <tr>
                                        <td className="py-2 font-medium w-1/3">Ng√¢n h√†ng:</td>
                                        <td className="text-blue-600 font-semibold">
                                            {'MB Bank'}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td className="py-2 font-medium">S·ªë t√†i kho·∫£n:</td>
                                        <td className="font-mono">
                                            {'VQRQACMYR4474'}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td className="py-2 font-medium">Ch·ªß t√†i kho·∫£n:</td>
                                        <td className="font-semibold">
                                            {'VU TIEN LONG'}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td className="py-2 font-medium">S·ªë ti·ªÅn:</td>
                                        <td className="text-red-600 font-bold text-lg">{amount?.toLocaleString()} VNƒê</td>
                                    </tr>
                                    <tr>
                                        <td className="py-2 font-medium">N·ªôi dung CK:</td>
                                        <td className="font-bold text-orange-600">DH{convertDescription(description)}</td>
                                    </tr>
                                    <tr>
                                        <td className="py-2 font-medium">M√£ ƒë∆°n h√†ng:</td>
                                        <td className="font-mono text-gray-600">{orderId}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        {orderCreated && (
                            <div className="mt-4 text-center">
                                <Spin tip="ƒêang ki·ªÉm tra thanh to√°n..." />
                                <p className="mt-2 text-gray-500">H·ªá th·ªëng ƒëang t·ª± ƒë·ªông ki·ªÉm tra tr·∫°ng th√°i thanh to√°n c·ªßa b·∫°n...</p>
                            </div>
                        )}
                    </Card>

                    {/* L∆∞u √Ω */}
                    <Alert
                        message="L∆∞u √Ω quan tr·ªçng"
                        description={
                            <ul className="list-disc list-inside space-y-1 text-sm">
                                <li className='text-red-500'><strong>Vui l√≤ng nh·∫≠p ch√≠nh x√°c S·ªê TI·ªÄN v√† N·ªòI DUNG CHUY·ªÇN KHO·∫¢N</strong></li>
                                <li>Th·ªùi gian x·ª≠ l√Ω: 1-3 ph√∫t (Sau khi thanh to√°n)</li>
                                <li>ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x√°c nh·∫≠n sau khi nh·∫≠n ƒë∆∞·ª£c ti·ªÅn</li>
                                <li>Li√™n h·ªá hotline n·∫øu c·∫ßn h·ªó tr·ª£: <strong>0966724435</strong></li>
                            </ul>
                        }
                        type="info"
                        showIcon
                    />
                </div>
            )
            }
        </div>
    );
};

export default PaymentQR;
