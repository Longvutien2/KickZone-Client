
'use client';
import { useEffect, useState } from "react";
import { Button, Modal, Form, Input, Upload, Card, Tabs, Descriptions, Divider, Typography, Space, Tag, Avatar, Select } from "antd";
import { UploadOutlined, EditOutlined, EnvironmentOutlined, PhoneOutlined, TeamOutlined, StarOutlined, CheckCircleOutlined, ClockCircleOutlined } from "@ant-design/icons";
import { useAppDispatch, useAppSelector } from "@/store/hook";
import { getFootballFieldByIdUserSlice, updateFootballFieldSlice } from "@/features/footballField.slice";
import { FootballField } from "@/models/football_field";
import { getAddress } from '@/api/address';
import { Address, Districts, Wards } from '@/models/address';
import { Option } from "antd/es/mentions";
import { upload } from "@/utils/upload";
import { toast } from "react-toastify";

const { Title, Text } = Typography;

const MyField = () => {
  const auth = useAppSelector((state) => state.auth);
  const footballFieldSlice = useAppSelector(state => state.footballField.detail) as FootballField;
  const dispatch = useAppDispatch();
  const [field, setField] = useState();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [form] = Form.useForm();
  const [activeTab, setActiveTab] = useState("1");
  const [provinces, setProvinces] = useState<Address[]>([]);
  const [districts, setDistricts] = useState<Districts[]>([]);
  const [wards, setWards] = useState<Wards[]>([]);
  const [loading, setLoading] = useState(false);

  const handleEdit = () => {
    form.setFieldsValue(field);
    setIsModalOpen(true);
  };

  const handleOk = async () => {
    form.validateFields().then((values) => {
      setField(values);
      const update = async () => {
        setLoading(true);

        let linkImage = footballFieldSlice.image; // Default to current image
        if (values.image && values.image !== footballFieldSlice.image) {
          linkImage = await upload(values.image);
          console.log("üéâ ·∫¢nh ƒë√£ upload th√†nh c√¥ng:", linkImage);
        }
        const data = {
          ...values,
          image: linkImage,
          address: {
            province: values.province || footballFieldSlice.address.province,
            district: values.district || footballFieldSlice.address.district,
            ward: values.ward || footballFieldSlice.address.ward,
            detail: values.detail || footballFieldSlice.address.detail
          }
        }
        const newData = await dispatch(updateFootballFieldSlice(data));
        newData && toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!")
        setLoading(false);
        setIsModalOpen(false);
      }
      update();
    });
  };

  useEffect(() => {
    if (auth) {
      const data = async () => {
        await dispatch(getFootballFieldByIdUserSlice(auth.value.user._id as string));
      }
      data();
    }
  }, [auth.value]);

  // Gi·∫£ l·∫≠p d·ªØ li·ªáu ti·ªán √≠ch
  const amenities = [
    "Ph√≤ng thay ƒë·ªì",
    "Nh√† v·ªá sinh",
    "Ch·ªó ƒë·ªÉ xe",
    "Qu·∫ßy n∆∞·ªõc",
    "Wifi mi·ªÖn ph√≠",
    "H·ªá th·ªëng ƒë√®n LED"
  ];

  // ƒê·ªãnh nghƒ©a c√°c tab items theo c√°ch m·ªõi
  const tabItems = [
    {
      key: "1",
      label: "Th√¥ng tin c∆° b·∫£n",
      children: (
        <>
          <Descriptions bordered column={2} className="bg-white rounded-lg">
            <Descriptions.Item label="T√™n s√¢n" span={2}>
              <Text strong>{footballFieldSlice.name || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
            </Descriptions.Item>
            <Descriptions.Item label="ƒê·ªãa ch·ªâ" span={2}>
              <Space>
                <EnvironmentOutlined className="text-blue-500" />
                <Text>
                  {footballFieldSlice.address.detail ? `${footballFieldSlice.address.detail}, ` : ""}
                  {footballFieldSlice.address.ward}, {footballFieldSlice.address.district}, {footballFieldSlice.address.province}
                </Text>
              </Space>
            </Descriptions.Item>
            <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i" span={2}>
              <Space>
                <PhoneOutlined className="text-green-500" />
                <Text>{footballFieldSlice.phone || "Ch∆∞a c·∫≠p nh·∫≠t"}</Text>
              </Space>
            </Descriptions.Item>
            <Descriptions.Item label="Gi·ªù m·ªü c·ª≠a" span={2}>
              <Space>
                <ClockCircleOutlined className="text-orange-500" />
                <Text>05:00 - 24:00</Text>
              </Space>
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i" span={2}>
              <Tag color="green">ƒêang ho·∫°t ƒë·ªông</Tag>
            </Descriptions.Item>
          </Descriptions>

          <div className="mt-6">
            <Title level={4}>Ti·ªán √≠ch</Title>
            <div className="flex flex-wrap gap-2 mt-2">
              {amenities.map((item, index) => (
                <Tag key={index} color="blue" className="px-3 py-1 text-sm">
                  <CheckCircleOutlined className="mr-1" /> {item}
                </Tag>
              ))}
            </div>
          </div>

          <div className="mt-6 flex justify-end">
            <Button
              type="primary"
              icon={<EditOutlined />}
              onClick={handleEdit}
              size="large"
              className="bg-blue-500"
            >
              Ch·ªânh s·ª≠a th√¥ng tin
            </Button>
          </div>
        </>
      )
    },
    {
      key: "2",
      label: "M√¥ t·∫£ chi ti·∫øt",
      children: (
        <div className="bg-white p-4 rounded-lg">
          <Text>
            {
              footballFieldSlice.description || 
              "Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt. H√£y th√™m m√¥ t·∫£ ƒë·ªÉ kh√°ch h√†ng hi·ªÉu r√µ h∆°n v·ªÅ s√¢n b√≥ng c·ªßa b·∫°n."}
          </Text>

          <div className="mt-6">
            <Title level={4}>Quy ƒë·ªãnh s√¢n b√≥ng</Title>
            <ul className="list-disc pl-5 mt-2 space-y-2">
              <li>Vui l√≤ng ƒë·∫øn ƒë√∫ng gi·ªù ƒë√£ ƒë·∫∑t</li>
              <li>Kh√¥ng h√∫t thu·ªëc trong khu√¥n vi√™n s√¢n</li>
              <li>Mang gi√†y ph√π h·ª£p khi v√†o s√¢n</li>
              <li>Thanh to√°n ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi s·ª≠ d·ª•ng s√¢n</li>
              <li>Gi·ªØ g√¨n v·ªá sinh chung</li>
            </ul>
          </div>

          {/* <div className="mt-6 flex justify-end">
            <Button
              type="primary"
              icon={<EditOutlined />}
              onClick={handleEdit}
              className="bg-blue-500"
            >
              Ch·ªânh s·ª≠a m√¥ t·∫£
            </Button>
          </div> */}
        </div>
      )
    },
  ];

  // Th√™m useEffect ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë·ªãa ch·ªâ
  useEffect(() => {
    const fetchAddress = async () => {
      try {
        const dataAddress = await getAddress();
        dataAddress && setProvinces(dataAddress);
      } catch (error) {
        console.error("Error fetching address data:", error);
      }
    };
    fetchAddress();
  }, []);

  // Th√™m h√†m x·ª≠ l√Ω khi ch·ªçn t·ªânh/th√†nh ph·ªë
  const handleProvinceChange = (provinceName: string) => {
    const selectedProvince = provinces.find((p: Address) => p.Name === provinceName);
    setDistricts(selectedProvince ? selectedProvince.Districts : []);
    form.setFieldsValue({ district: "", ward: "", detail: "" });
  };

  // Th√™m h√†m x·ª≠ l√Ω khi ch·ªçn qu·∫≠n/huy·ªán
  const handleDistrictChange = (districtName: string) => {
    const selectedDistrict = districts.find((d: Districts) => d.Name === districtName);
    setWards(selectedDistrict ? selectedDistrict.Wards : []);
    form.setFieldsValue({ ward: "", detail: "" });
  };

  return (
    <div className="p-6 bg-gray-100 min-h-screen">
      <div className="bg-white p-6 rounded-lg shadow">
        <h1 className="text-xl font-semibold mb-4">S√¢n b√≥ng c·ªßa t√¥i</h1>

        <div className="">
          {/* Th√¥ng tin ch√≠nh */}
          <div className="l">
            <Card className="shadow-md rounded-lg overflow-hidden border-0">
              <div className="relative h-64 -mx-6 -mt-6 mb-6">
                {footballFieldSlice.image ? (
                  <img
                    src={footballFieldSlice.image}
                    alt="S√¢n b√≥ng"
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full bg-gradient-to-r from-blue-500 to-green-500 flex items-center justify-center">
                    <Text className="text-white text-xl">Ch∆∞a c√≥ h√¨nh ·∫£nh</Text>
                  </div>
                )}
                <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-6">
                  <h1 className="text-white m-0 text-3xl font-medium">{footballFieldSlice.name || "Ch∆∞a c√≥ t√™n s√¢n"}</h1>
                </div>
              </div>

              <Tabs activeKey={activeTab} onChange={setActiveTab} items={tabItems} className="mt-4" />
            </Card>
          </div>
        </div>
      </div>

      <Modal
        title="Ch·ªânh S·ª≠a Th√¥ng Tin S√¢n"
        open={isModalOpen}
        onOk={handleOk}
        onCancel={() => setIsModalOpen(false)}
        width={700}
        footer={[
          <Button key="back" onClick={() => setIsModalOpen(false)}>
            H·ªßy
          </Button>,
          <Button key="submit" type="primary" loading={loading} onClick={handleOk} className="bg-blue-500">
            L∆∞u thay ƒë·ªïi
          </Button>,
        ]}
      >
        <Form form={form} initialValues={{
          ...footballFieldSlice,
          province: footballFieldSlice.address.province,
          district: footballFieldSlice.address.district,
          ward: footballFieldSlice.address.ward,
          detail: footballFieldSlice.address.detail
        }} layout="vertical" className="mt-4" >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <Form.Item name="_id" label="T√™n S√¢n" hidden rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n s√¢n!" }]}>
              <Input placeholder="Nh·∫≠p t√™n s√¢n b√≥ng" />
            </Form.Item>
            <Form.Item name="name" label="T√™n S√¢n" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n s√¢n!" }]}>
              <Input placeholder="Nh·∫≠p t√™n s√¢n b√≥ng" />
            </Form.Item>
            <Form.Item name="phone" label="S·ªë ƒêi·ªán Tho·∫°i" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" }]}>
              <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i li√™n h·ªá" />
            </Form.Item>
          </div>

          <Form.Item label="ƒê·ªãa Ch·ªâ" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Form.Item name="province" noStyle rules={[{ required: true, message: "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë!" }]}>
                <Select
                  placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë"
                  onChange={handleProvinceChange}
                  className="w-full mb-2"
                >
                  {provinces.map((province: Address) => (
                    <Option key={province.Name} value={province.Name}>
                      {province.Name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>

              <Form.Item name="district" noStyle rules={[{ required: true, message: "Vui l√≤ng ch·ªçn qu·∫≠n/huy·ªán!" }]}>
                <Select
                  placeholder="Ch·ªçn qu·∫≠n/huy·ªán"
                  onChange={handleDistrictChange}
                  className="w-full mb-2"
                  disabled={!districts.length}
                >
                  {districts.map((district: Districts) => (
                    <Option key={district.Name} value={district.Name}>
                      {district.Name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>

              <Form.Item name="ward" noStyle rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ph∆∞·ªùng/x√£!" }]}>
                <Select
                  placeholder="Ch·ªçn ph∆∞·ªùng/x√£"
                  className="w-full mb-2"
                  disabled={!wards.length}
                >
                  {wards.map((ward: Wards) => (
                    <Option key={ward.Name} value={ward.Name}>
                      {ward.Name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>

              <Form.Item name="detail" noStyle>
                <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ chi ti·∫øt (s·ªë nh√†, ƒë∆∞·ªùng...)" className="w-full" />
              </Form.Item>
            </div>
          </Form.Item>

          <Form.Item name="description" label="M√¥ t·∫£">
            <Input.TextArea rows={4} placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s√¢n b√≥ng c·ªßa b·∫°n" />
          </Form.Item>


          <Form.Item label="·∫¢nh S√¢n" name="image" rules={[{ required: true, message: "Vui l√≤ng t·∫£i l√™n ·∫£nh s√¢n!" }]}>
            <Upload beforeUpload={() => false} maxCount={1} listType="picture">
              <Button icon={<UploadOutlined />}>Ch·ªçn ·∫£nh</Button>
            </Upload>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}

export default MyField;
