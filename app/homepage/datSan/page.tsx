'use client';
import { useEffect, useState } from "react";
import { Card, Button, Collapse, Tag } from "antd";
import { EnvironmentOutlined, PhoneOutlined, FilterOutlined, CalendarOutlined, RightOutlined } from '@ant-design/icons';
import dayjs, { Dayjs } from "dayjs";
import "dayjs/locale/vi"; // Import ti·∫øng Vi·ªát cho Day.js
import Link from "next/link";
import { Field, TimeSlot } from "@/models/field";
import { getFieldsByIdFootball } from "@/api/field";
import { useAppDispatch, useAppSelector } from "@/store/hook";
import { getFootballFieldByIdSlice, getFootballFieldByIdUserSlice } from "@/features/footballField.slice";
import { addBreadcrumb, resetBreadcrumb, setBreadcrumb } from "@/features/breadcrumb.slice";
import { FootballField } from "@/models/football_field";
import { getListTimeSlotsByFootballFieldId } from "@/features/timeSlot.slice";
import { getListOrdersSlice } from "@/features/order.slice";
import { Order } from "@/models/payment";

const { Panel } = Collapse

const Detail = () => {
  const auth = useAppSelector((state) => state.auth)
  const timeslots = useAppSelector(state => state.timeSlot.value)
  // Thay ƒë·ªïi t·ª´ bookings sang orders
  const orders = useAppSelector(state => state.order.value)
  const footballField = useAppSelector(state => state.footballField.detail) as FootballField



  const [data, setData] = useState<Field[]>([]); // D·ªØ li·ªáu l·ªçc the
  const [filteredData, setFilteredData] = useState<Field[]>([]); // D·ªØ li·ªáu sau khi l·ªçc
  // const { id } = useParams();
  const [selectedDate, setSelectedDate] = useState<Dayjs>(dayjs()); // Ng√†y ƒëang ch·ªçn
  const [activeField, setActiveField] = useState<string | null>(null); // S√¢n n√†o ƒëang m·ªü
  const [selectedDate2, setSelectedDate2] = useState(dayjs().format("D/M"));
  const [selectedFieldType, setSelectedFieldType] = useState<string>("all"); // B·ªô l·ªçc lo·∫°i s√¢n
  const [showCalendar, setShowCalendar] = useState(false); // Hi·ªÉn th·ªã calendar inline
  const [tempSelectedDate, setTempSelectedDate] = useState<Dayjs>(dayjs()); // Ng√†y t·∫°m ch·ªçn trong calendar
  const dispatch = useAppDispatch();

  if (!data) return <p className="text-center text-red-500">Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng</p>;

  dayjs.locale("vi"); // Thi·∫øt l·∫≠p ng√¥n ng·ªØ cho Dayjs
  // Thay ƒë·ªïi log t·ª´ bookings sang orders
  console.log("orders", orders);

  // H√†m toggle m·ªü / ƒë√≥ng s√¢n
  const toggleField = (id: string) => {
    setActiveField(activeField === id ? null : id);
  };

  // H√†m chuy·ªÉn ƒë·ªïi key tab th√†nh ƒë·ªãnh d·∫°ng ng√†y
  const handleDateChange = (key: string) => {
    // T√°ch gi√° tr·ªã ng√†y, th√°ng, nƒÉm t·ª´ key
    const [day, month, year] = key.split("/").map(Number);
    // T·∫°o ƒë·ªëi t∆∞·ª£ng dayjs ƒë√∫ng
    const convertedDate = dayjs(`${year}-${month}-${day}`, "YYYY-M-D", true);
    setSelectedDate(convertedDate);
  };

  // L·ªçc danh s√°ch s√¢n c√≥ ca ƒë√° trong ng√†y ƒë∆∞·ª£c ch·ªçn
  // const filteredFields = data.map((field: any) => {
  //     const schedule = field.timeSlots.find((s: any) => s.date === selectedDate.format("YYYY-MM-DD"));
  //     return schedule ? { ...field, timeSlots: schedule.timeSlots } : null;
  // }).filter(Boolean);


  // Chuy·ªÉn ƒë·ªïi s·ªë th·ª© trong tu·∫ßn th√†nh d·∫°ng ƒë√∫ng c·ªßa ti·∫øng Vi·ªát
  const getVietnameseDay = (dayNumber: number) => {
    if (dayNumber === 0) return "CN"; // Ch·ªß Nh·∫≠t
    return `Th ${dayNumber + 1}`; // Th·ª© 2 -> Th·ª© 7
  };

  // H√†m l·ªçc s√¢n theo lo·∫°i
  const filterFieldsByType = (fields: Field[], type: string) => {
    if (type === "all") return fields;
    return fields.filter(field => field.people.toString() === type);
  };

  // L·ªçc d·ªØ li·ªáu khi selectedFieldType thay ƒë·ªïi
  const getFilteredFields = () => {
    return filterFieldsByType(data, selectedFieldType);
  };

  // T·∫°o danh s√°ch 30 ng√†y ti·∫øp theo v·ªõi style gi·ªëng Moveek
  const dates = Array.from({ length: 30 }, (_, index) => {
    const date = dayjs().add(index, "day");
    const isSelected = date.format("D/M/YYYY") === selectedDate.format("D/M/YYYY");

    return {
      key: date.format("D/M/YYYY"),
      label: (
        <div className={`flex flex-col items-center justify-center py-3 transition-all flex-shrink-0 ${isSelected
          ? 'bg-blue-400 text-white shadow-md'
          : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
          } w-[120px] h-[90px]`}>
          <div className="text-lg font-medium">{date.format("D/M")}</div>
          <div className={`text-md ${isSelected ? 'text-white' : 'text-g  ray-500'}`}>
            {getVietnameseDay(date.day())}
          </div>
        </div>
      ),
    };
  });


  useEffect(() => {
    const getData = async () => {
      try {
        // L·∫•y th√¥ng tin s√¢n b√≥ng c·ªßa ng∆∞·ªùi d√πng
        await dispatch(getFootballFieldByIdSlice("67ce9ea74c79326f98b8bf8e"));
        if (!footballField._id) return;

        // L·∫•y danh s√°ch s√¢n v√† timeslots
        const fieldsResponse = await getFieldsByIdFootball(footballField._id as string);
        setData(fieldsResponse.data);
        // L·∫•y danh s√°ch khung gi·ªù
        await dispatch(getListTimeSlotsByFootballFieldId(footballField._id as string));

        // Thay ƒë·ªïi t·ª´ getBookingsByFootballFieldAndDateSlice sang getListOrdersSlice
        await dispatch(getListOrdersSlice());

        // Th√™m breadcrumb
        dispatch(setBreadcrumb([
          { name: 'Home', url: '/' },
          { name: 'ƒê·∫∑t s√¢n', url: '/homepage/datSan' },
        ]));
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    getData();
  }, [auth.value]);

  // Th√™m useEffect m·ªõi ƒë·ªÉ l·∫•y orders khi selectedDate thay ƒë·ªïi
  useEffect(() => {
    const fetchData = async () => {
      // N·∫øu kh√¥ng c√≥ API c·ª• th·ªÉ, l·∫•y t·∫•t c·∫£ orders
      await dispatch(getListOrdersSlice());
    };
    if (selectedDate && footballField._id) fetchData();
  }, [selectedDate, footballField._id])

  return (
    <div className="container mx-auto">
      <div className="flex flex-row gap-6">
        {/* Ph·∫ßn b√™n tr√°i - Ch·ªçn ng√†y v√† danh s√°ch s√¢n */}
        <div className="w-2/3">
          {/* Ch·ªçn ng√†y - Style gi·ªëng Moveek */}
          <div>
            <div className="flex justify-between items-center gap-1">
              {/* Hi·ªÉn th·ªã 7 ng√†y ƒë·∫ßu */}
              <div className="flex rounded-lg border overflow-hidden border-gray-200">
                {dates.slice(0, 7).map((date) => (
                  <div
                    key={date.key}
                    onClick={() => handleDateChange(date.key)}
                    className="cursor-pointer flex-shrink-0"
                  >
                    {date.label}
                  </div>
                ))}
              </div>

              {/* N√∫t toggle calendar */}
              <div
                onClick={() => {
                  setTempSelectedDate(selectedDate); // Set ng√†y hi·ªán t·∫°i v√†o temp
                  setShowCalendar(!showCalendar);
                }}
                className={`cursor-pointer flex-shrink-0 flex flex-col items-center justify-center py-3 px-2 transition-all duration-200 w-[140px] min-w-[80px] h-[90px] rounded-lg border-2 border-dashed ${showCalendar
                  ? 'bg-blue-100 text-blue-600 border-blue-400'
                  : 'bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600 border-gray-300 hover:border-blue-400'
                  }`}
              >
                <CalendarOutlined className="text-xl mb-1" />
                <div className="text-xs">Kh√°c</div>
              </div>
            </div>
          </div>

          {/* Calendar inline khi click "Kh√°c" */}
          {showCalendar && (
            <div className="mt-4 p-4 bg-white rounded-xl shadow-lg border border-gray-200">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-800">üìÖ Ch·ªçn ng√†y ƒë·∫∑t s√¢n</h3>
                <Button
                  type="text"
                  onClick={() => {
                    setShowCalendar(false);
                    setTempSelectedDate(selectedDate); // Reset v·ªÅ ng√†y ƒë√£ ch·ªçn
                  }}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ‚úï
                </Button>
              </div>
              {/* Custom Calendar Grid */}
              <div className="bg-white">
                {/* Header */}
                <div className="flex justify-between items-center mb-4 px-2">
                  <div className="text-lg font-semibold">
                    {tempSelectedDate.format('MMMM YYYY')}
                  </div>
                  <div className="text-sm text-gray-500">
                    Ch·ªçn ng√†y t·ª´ h√¥m nay ƒë·∫øn {dayjs().add(30, 'day').format('DD/MM')}
                  </div>
                </div>

                {/* Days of week header */}
                <div className="grid grid-cols-7 gap-1 mb-2">
                  {['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'].map((day) => (
                    <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                      {day}
                    </div>
                  ))}
                </div>

                {/* Calendar Grid */}
                <div className="grid grid-cols-7 gap-1">
                  {(() => {
                    const today = dayjs();

                    // Logic ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã th√°ng n√†o:
                    // - N·∫øu tempSelectedDate l√† th√°ng hi·ªán t·∫°i: hi·ªÉn th·ªã t·ª´ tu·∫ßn ch·ª©a ng√†y h√¥m nay
                    // - N·∫øu tempSelectedDate l√† th√°ng kh√°c: hi·ªÉn th·ªã t·ª´ ƒë·∫ßu th√°ng ƒë√≥
                    let startDate;
                    if (tempSelectedDate.isSame(today, 'month')) {
                      // C√πng th√°ng v·ªõi h√¥m nay: b·∫Øt ƒë·∫ßu t·ª´ tu·∫ßn ch·ª©a ng√†y h√¥m nay
                      startDate = today.startOf('week');
                    } else {
                      // Th√°ng kh√°c: b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu tu·∫ßn ƒë·∫ßu ti√™n c·ªßa th√°ng ƒë√≥
                      startDate = tempSelectedDate.startOf('month').startOf('week');
                    }

                    const dates = [];

                    // T·∫°o 6 tu·∫ßn (42 ng√†y) ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß calendar
                    for (let i = 0; i < 42; i++) {
                      const currentDate = startDate.add(i, 'day');
                      const isToday = currentDate.isSame(today, 'day');
                      const isSelected = currentDate.isSame(tempSelectedDate, 'day');
                      const isDisabled = currentDate.isBefore(today, 'day') || currentDate.isAfter(today.add(30, 'day'), 'day');
                      const isCurrentMonth = currentDate.isSame(tempSelectedDate, 'month');

                      dates.push(
                        <div
                          key={i}
                          onClick={() => {
                            if (!isDisabled) {
                              setTempSelectedDate(currentDate);
                            }
                          }}
                          className={`
                            h-10 flex items-center justify-center text-sm cursor-pointer rounded-lg transition-all
                            ${isSelected ? 'bg-blue-500 text-white font-semibold' : ''}
                            ${isToday && !isSelected ? 'bg-blue-100 text-blue-600 font-semibold border-2 border-blue-300' : ''}
                            ${isDisabled ? 'text-gray-300 cursor-not-allowed' : 'hover:bg-blue-50'}
                            ${!isCurrentMonth && !isDisabled ? 'text-gray-400' : ''}
                            ${!isSelected && !isToday && !isDisabled && isCurrentMonth ? 'text-gray-700' : ''}
                          `}
                        >
                          {currentDate.date()}
                        </div>
                      );
                    }

                    return dates;
                  })()}
                </div>
              </div>

              {/* Buttons */}
              <div className="flex justify-end gap-3 mt-4">
                <Button
                  onClick={() => {
                    setShowCalendar(false);
                    setTempSelectedDate(selectedDate); // Reset v·ªÅ ng√†y ƒë√£ ch·ªçn
                  }}
                >
                  H·ªßy
                </Button>
                <Button
                  type="primary"
                  onClick={() => {
                    setSelectedDate(tempSelectedDate);
                    setShowCalendar(false);
                  }}
                >
                  Ch·ªçn ng√†y n√†y
                </Button>
              </div>

              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <div className="text-sm text-blue-700 font-medium">
                  üìã Quy ƒë·ªãnh ƒë·∫∑t s√¢n:
                </div>
                <div className="text-sm text-blue-600 mt-1">
                  ‚Ä¢ Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t s√¢n t·ª´ h√¥m nay ƒë·∫øn t·ªëi ƒëa 30 ng√†y t·ªõi (<strong>{dayjs().add(30, 'day').format('DD/MM/YYYY')}</strong>)
                </div>
              </div>
            </div>
          )}

          {/* B·ªô l·ªçc lo·∫°i s√¢n */}
          <div className="mt-6 bg-white p-4 rounded-lg shadow-sm border border-gray-100">
            <div className="flex items-center gap-4 flex-wrap">
              <div className="flex items-center gap-2">
                <FilterOutlined className="text-blue-500" />
                <span className="font-medium text-gray-700">L·ªçc theo lo·∫°i s√¢n:</span>
              </div>
              <div className="flex gap-3 flex-wrap">
                <Tag
                  color={selectedFieldType === "all" ? "blue" : "default"}
                  className="cursor-pointer px-4 py-2 text-sm font-medium hover:scale-105 transition-transform"
                  onClick={() => setSelectedFieldType("all")}
                >
                  T·∫•t c·∫£
                </Tag>
                <Tag
                  color={selectedFieldType === "5v5" ? "green" : "default"}
                  className="cursor-pointer px-4 py-2 text-sm font-medium hover:scale-105 transition-transform"
                  onClick={() => setSelectedFieldType("5v5")}
                >
                  S√¢n 5
                </Tag>
                <Tag
                  color={selectedFieldType === "7v7" ? "orange" : "default"}
                  className="cursor-pointer px-4 py-2 text-sm font-medium hover:scale-105 transition-transform"
                  onClick={() => setSelectedFieldType("7v7")}
                >
                  S√¢n 7
                </Tag>
                <Tag
                  color={selectedFieldType === "22" ? "red" : "default"}
                  className="cursor-pointer px-4 py-2 text-sm font-medium hover:scale-105 transition-transform"
                  onClick={() => setSelectedFieldType("22")}
                >
                  S√¢n 11
                </Tag>
              </div>
            </div>
          </div>

          {/* Danh s√°ch s√¢n */}
          <div className="mt-6">
            <div className="text-center">
              <h2 className="text-2xl font-bold my-4">
                Danh s√°ch s√¢n ({selectedDate.format("DD/MM/YYYY")})
                {selectedFieldType !== "all" && (
                  <span className="text-blue-500 text-lg ml-2">
                    - {selectedFieldType === "10" ? "S√¢n 5 ng∆∞·ªùi" :
                      selectedFieldType === "14" ? "S√¢n 7 ng∆∞·ªùi" : "S√¢n 11 ng∆∞·ªùi"}
                  </span>
                )}
              </h2>
              {data &&
                <div className="space-y-4">
                  {getFilteredFields().map((field: Field, index: number) => (
                    <div key={index + 1}>
                      <Collapse
                        items={[
                          {
                            key: field._id,
                            label: `${field.name} - ${field.status}`,
                            children:
                              <div className="gap-4 w-full text-left">
                                {field.status === 'B·∫£o tr√¨' ? (
                                  <p className="text-center text-gray-500">S√¢n n√†y hi·ªán ƒëang b·∫£o tr√¨, kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch.</p>
                                ) : (
                                  timeslots && timeslots.length > 0 ? (
                                    timeslots.map((slot: TimeSlot, idx) => (
                                      <Button
                                        key={idx}
                                        // Thay ƒë·ªïi t·ª´ bookings.some sang orders.some
                                        disabled={orders.length > 0 && orders.some(
                                          (o: Order) =>
                                            o.date === selectedDate.format('DD-MM-YYYY') &&
                                            o.fieldName === field.name &&
                                            o.timeStart === slot.time &&
                                            o.paymentStatus === "success"
                                        )}
                                        className={`border p-2 rounded-md text-center cursor-pointer m-1 '
                                                                        }`}
                                      >
                                        <Link href={`/homepage/datSan/${field._id}/${slot._id}?date=${selectedDate.format("DD-MM-YYYY")}`}>
                                          {slot.time}
                                        </Link>
                                      </Button>
                                    ))
                                  ) : (
                                    <p className="text-center text-gray-500">Kh√¥ng c√≥ ca ƒë√° trong ng√†y n√†y.</p>
                                  )
                                )}
                              </div>,
                          }

                        ]}
                      />
                    </div>
                  ))}
                </div>
              }
            </div>
          </div>
        </div>

        {/* Ph·∫ßn b√™n ph·∫£i - Th√¥ng tin b·ªï sung */}
        <div className="w-1/3">
          {/* Th√¥ng tin s√¢n b√≥ng */}
          <Card
            title="Th√¥ng tin s√¢n b√≥ng"
            className="mb-4"
            cover={<img alt="stadium" src={footballField?.image} className="h-48 object-cover" />}
          >
            <h2 className="text-xl font-bold">{footballField?.name}</h2>
            <p className="text-gray-500 flex items-center">
              <EnvironmentOutlined className="mr-2" />
              {footballField?.address && `${footballField.address?.detail ? `${footballField.address.detail}, ` : ""} ${footballField.address.ward}, ${footballField.address.district}, ${footballField.address.province}`}
            </p>
            <p className="text-gray-500 flex items-center">
              <PhoneOutlined className="mr-2" /> {footballField?.phone}
            </p>
            <Button type="primary" className="mt-3 w-full">
              <Link href={`/homepage/datSan/${footballField?._id}/detail`}>
                Xem chi ti·∫øt s√¢n
              </Link>
            </Button>
          </Card>

          {/* H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n */}
          <Card title="H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n" className="mb-4">
            <ol className="list-decimal pl-4 space-y-2">
              <li>Ch·ªçn ng√†y b·∫°n mu·ªën ƒë·∫∑t s√¢n</li>
              <li>Ch·ªçn s√¢n ph√π h·ª£p t·ª´ danh s√°ch</li>
              <li>Ch·ªçn khung gi·ªù c√≤n tr·ªëng</li>
              <li>ƒêi·ªÅn th√¥ng tin v√† thanh to√°n</li>
              <li>Nh·∫≠n x√°c nh·∫≠n ƒë·∫∑t s√¢n qua email</li>
            </ol>
          </Card>

          {/* Th·ªëng k√™ */}
          <Card title="Th·ªëng k√™">
            <div className="space-y-2">
              <p><strong>T·ªïng s·ªë s√¢n:</strong> {data?.length || 0}</p>
              <p><strong>S√¢n hi·ªÉn th·ªã:</strong> {getFilteredFields()?.length || 0}</p>
              <p><strong>Khung gi·ªù c√≥ s·∫µn:</strong> {timeslots?.length || 0}</p>
              {/* Thay ƒë·ªïi t·ª´ bookings sang orders */}
              <p><strong>ƒê√£ ƒë·∫∑t h√¥m nay:</strong> {orders.length > 0 && orders?.filter((o: Order) =>
                o.date === dayjs().format('DD-MM-YYYY') &&
                o.paymentStatus === "success"
              )?.length || 0}</p>
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};


export default Detail;
