'use client';
import { useEffect, useState } from "react";
import { Card, Button, Collapse, Tag } from "antd";
import { EnvironmentOutlined, PhoneOutlined, FilterOutlined, CalendarOutlined, RightOutlined } from '@ant-design/icons';
import dayjs, { Dayjs } from "dayjs";
import "dayjs/locale/vi"; // Import ti·∫øng Vi·ªát cho Day.js
import Link from "next/link";
import { Field, TimeSlot } from "@/models/field";
import { getFieldsByIdFootball } from "@/api/field";
import { useAppDispatch, useAppSelector } from "@/store/hook";
import { getFootballFieldByIdSlice, getFootballFieldByIdUserSlice } from "@/features/footballField.slice";
import { addBreadcrumb, resetBreadcrumb, setBreadcrumb } from "@/features/breadcrumb.slice";
import { FootballField } from "@/models/football_field";
import { getListTimeSlotsByFootballFieldId } from "@/features/timeSlot.slice";
import { getListOrdersSlice } from "@/features/order.slice";
import { Order } from "@/models/payment";

const { Panel } = Collapse

const Detail = () => {
  const auth = useAppSelector((state) => state.auth)
  const timeslots = useAppSelector(state => state.timeSlot.value)
  // Thay ƒë·ªïi t·ª´ bookings sang orders
  const orders = useAppSelector(state => state.order.value)
  const footballField = useAppSelector(state => state.footballField.detail) as FootballField



  const [data, setData] = useState<Field[]>([]); // D·ªØ li·ªáu l·ªçc the
  const [filteredData, setFilteredData] = useState<Field[]>([]); // D·ªØ li·ªáu sau khi l·ªçc
  // const { id } = useParams();
  const [selectedDate, setSelectedDate] = useState<Dayjs>(dayjs()); // Ng√†y ƒëang ch·ªçn
  const [activeField, setActiveField] = useState<string | null>(null); // S√¢n n√†o ƒëang m·ªü
  const [selectedDate2, setSelectedDate2] = useState(dayjs().format("D/M"));
  const [selectedFieldType, setSelectedFieldType] = useState<string>("all"); // B·ªô l·ªçc lo·∫°i s√¢n
  const [showCalendar, setShowCalendar] = useState(false); // Hi·ªÉn th·ªã calendar inline
  const [tempSelectedDate, setTempSelectedDate] = useState<Dayjs>(dayjs()); // Ng√†y t·∫°m ch·ªçn trong calendar
  const dispatch = useAppDispatch();

  if (!data) return <p className="text-center text-red-500">Kh√¥ng t√¨m th·∫•y s√¢n b√≥ng</p>;

  dayjs.locale("vi"); // Thi·∫øt l·∫≠p ng√¥n ng·ªØ cho Dayjs
  // Thay ƒë·ªïi log t·ª´ bookings sang orders
  console.log("orders", orders);

  // H√†m toggle m·ªü / ƒë√≥ng s√¢n
  const toggleField = (id: string) => {
    setActiveField(activeField === id ? null : id);
  };

  // H√†m chuy·ªÉn ƒë·ªïi key tab th√†nh ƒë·ªãnh d·∫°ng ng√†y
  const handleDateChange = (key: string) => {
    // T√°ch gi√° tr·ªã ng√†y, th√°ng, nƒÉm t·ª´ key
    const [day, month, year] = key.split("/").map(Number);
    // T·∫°o ƒë·ªëi t∆∞·ª£ng dayjs ƒë√∫ng
    const convertedDate = dayjs(`${year}-${month}-${day}`, "YYYY-M-D", true);
    setSelectedDate(convertedDate);
  };

  // L·ªçc danh s√°ch s√¢n c√≥ ca ƒë√° trong ng√†y ƒë∆∞·ª£c ch·ªçn
  // const filteredFields = data.map((field: any) => {
  //     const schedule = field.timeSlots.find((s: any) => s.date === selectedDate.format("YYYY-MM-DD"));
  //     return schedule ? { ...field, timeSlots: schedule.timeSlots } : null;
  // }).filter(Boolean);


  // Chuy·ªÉn ƒë·ªïi s·ªë th·ª© trong tu·∫ßn th√†nh d·∫°ng ƒë√∫ng c·ªßa ti·∫øng Vi·ªát
  const getVietnameseDay = (dayNumber: number) => {
    if (dayNumber === 0) return "CN"; // Ch·ªß Nh·∫≠t
    return `Th ${dayNumber + 1}`; // Th·ª© 2 -> Th·ª© 7
  };

  // H√†m l·ªçc s√¢n theo lo·∫°i
  const filterFieldsByType = (fields: Field[], type: string) => {
    if (type === "all") return fields;
    return fields.filter(field => field.people.toString() === type);
  };

  // L·ªçc d·ªØ li·ªáu khi selectedFieldType thay ƒë·ªïi
  const getFilteredFields = () => {
    return filterFieldsByType(data, selectedFieldType);
  };

  // T·∫°o danh s√°ch 30 ng√†y ti·∫øp theo v·ªõi style gi·ªëng Moveek
  const dates = Array.from({ length: 30 }, (_, index) => {
    const date = dayjs().add(index, "day");
    const isSelected = date.format("D/M/YYYY") === selectedDate.format("D/M/YYYY");

    return {
      key: date.format("D/M/YYYY"),
      label: (
        <div className={`flex flex-col items-center justify-center py-2 sm:py-3 transition-all flex-shrink-0 ${isSelected
          ? 'bg-[#FE6900] text-white shadow-md'
          : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
          } w-[80px] sm:w-[100px] md:w-[120px] h-[60px] sm:h-[75px] md:h-[90px]`}>
          <div className="text-sm sm:text-base md:text-lg font-medium">{date.format("D/M")}</div>
          <div className={`text-xs sm:text-sm md:text-base ${isSelected ? 'text-white' : 'text-gray-500'}`}>
            {getVietnameseDay(date.day())}
          </div>
        </div>
      ),
    };
  });


  useEffect(() => {
    const getData = async () => {
      try {
        // L·∫•y th√¥ng tin s√¢n b√≥ng c·ªßa ng∆∞·ªùi d√πng
        await dispatch(getFootballFieldByIdSlice("67ce9ea74c79326f98b8bf8e"));
        if (!footballField._id) return;

        // L·∫•y danh s√°ch s√¢n v√† timeslots
        const fieldsResponse = await getFieldsByIdFootball(footballField._id as string);
        setData(fieldsResponse.data);
        // L·∫•y danh s√°ch khung gi·ªù
        await dispatch(getListTimeSlotsByFootballFieldId(footballField._id as string));

        // Thay ƒë·ªïi t·ª´ getBookingsByFootballFieldAndDateSlice sang getListOrdersSlice
        await dispatch(getListOrdersSlice());

        // Th√™m breadcrumb
        dispatch(setBreadcrumb([
          { name: 'Home', url: '/' },
          { name: 'ƒê·∫∑t s√¢n', url: '/homepage/datSan' },
        ]));
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    getData();
  }, [auth.value]);

  // Th√™m useEffect m·ªõi ƒë·ªÉ l·∫•y orders khi selectedDate thay ƒë·ªïi
  useEffect(() => {
    const fetchData = async () => {
      // N·∫øu kh√¥ng c√≥ API c·ª• th·ªÉ, l·∫•y t·∫•t c·∫£ orders
      await dispatch(getListOrdersSlice());
    };
    if (selectedDate && footballField._id) fetchData();
  }, [selectedDate, footballField._id])

  return (
    <div className="min-h-screen ">
      <div className="">
        <div className="flex flex-col lg:flex-row gap-6">
          {/* Ph·∫ßn b√™n tr√°i - Ch·ªçn ng√†y v√† danh s√°ch s√¢n */}
          <div className="w-full lg:w-2/3">
            {/* Header v·ªõi ti√™u ƒë·ªÅ */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6 xl:hidden">
              <h1 className="text-2xl md:text-3xl font-bold text-gray-800 mb-2">
                ƒê·∫∑t s√¢n b√≥ng ƒë√°
              </h1>
              <p className="text-gray-600">Ch·ªçn ng√†y v√† s√¢n ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu tr·∫≠n ƒë·∫•u c·ªßa b·∫°n</p>
            </div>

            {/* Ch·ªçn ng√†y - Style responsive */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 md:p-6 mb-6">
              <h2 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                üìÖ Ch·ªçn ng√†y ƒë·∫∑t s√¢n
              </h2>

              <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                {/* Hi·ªÉn th·ªã ng√†y responsive */}
                <div className="w-full overflow-x-auto">
                  <div className="flex rounded-lg border overflow-hidden border-gray-200 min-w-max">
                    {dates.slice(0, 7).map((date) => (
                      <div
                        key={date.key}
                        onClick={() => handleDateChange(date.key)}
                        className="cursor-pointer flex-shrink-0"
                      >
                        {date.label}
                      </div>
                    ))}
                  </div>
                </div>

                {/* N√∫t toggle calendar responsive */}
                <div
                  onClick={() => {
                    setTempSelectedDate(selectedDate); // Set ng√†y hi·ªán t·∫°i v√†o temp
                    setShowCalendar(!showCalendar);
                  }}
                  className={`cursor-pointer flex-shrink-0 flex flex-col items-center justify-center py-3 px-4 transition-all duration-200 w-full sm:w-[100px] min-w-[100px] h-[60px] sm:h-[90px] rounded-lg border-2 border-dashed ${showCalendar
                    ? 'border-[#FE6900] bg-orange-50'
                    : 'bg-gray-100 text-gray-600  border-gray-300 hover:border-[#FE6900]'
                    }`}
                >
                  <CalendarOutlined className="text-lg sm:text-xl mb-1" />
                  <div className="text-xs sm:text-sm font-medium">Kh√°c</div>
                </div>
              </div>
            </div>

            {/* Calendar inline responsive */}
            {showCalendar && (
              <div className="mt-4 p-4 md:p-6 bg-white rounded-xl shadow-lg border border-gray-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg md:text-xl font-semibold text-gray-800">üìÖ Ch·ªçn ng√†y ƒë·∫∑t s√¢n</h3>
                  <Button
                    type="text"
                    onClick={() => {
                      setShowCalendar(false);
                      setTempSelectedDate(selectedDate); // Reset v·ªÅ ng√†y ƒë√£ ch·ªçn
                    }}
                    className="text-gray-500 hover:text-gray-700 text-lg"
                  >
                    ‚úï
                  </Button>
                </div>
                {/* Custom Calendar Grid */}
                <div className="bg-white">
                  {/* Header responsive */}
                  <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 px-2 gap-2">
                    <div className="text-lg md:text-xl font-semibold">
                      {tempSelectedDate.format('MMMM YYYY')}
                    </div>
                    <div className="text-xs sm:text-sm text-gray-500">
                      Ch·ªçn ng√†y t·ª´ h√¥m nay ƒë·∫øn {dayjs().add(30, 'day').format('DD/MM')}
                    </div>
                  </div>

                  {/* Days of week header responsive */}
                  <div className="grid grid-cols-7 gap-1 mb-2">
                    {['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'].map((day) => (
                      <div key={day} className="text-center text-xs sm:text-sm font-medium text-gray-500 py-2">
                        {day}
                      </div>
                    ))}
                  </div>

                  {/* Calendar Grid */}
                  <div className="grid grid-cols-7 gap-1">
                    {(() => {
                      const today = dayjs();

                      // Logic ƒë·ªÉ quy·∫øt ƒë·ªãnh hi·ªÉn th·ªã th√°ng n√†o:
                      // - N·∫øu tempSelectedDate l√† th√°ng hi·ªán t·∫°i: hi·ªÉn th·ªã t·ª´ tu·∫ßn ch·ª©a ng√†y h√¥m nay
                      // - N·∫øu tempSelectedDate l√† th√°ng kh√°c: hi·ªÉn th·ªã t·ª´ ƒë·∫ßu th√°ng ƒë√≥
                      let startDate;
                      if (tempSelectedDate.isSame(today, 'month')) {
                        // C√πng th√°ng v·ªõi h√¥m nay: b·∫Øt ƒë·∫ßu t·ª´ tu·∫ßn ch·ª©a ng√†y h√¥m nay
                        startDate = today.startOf('week');
                      } else {
                        // Th√°ng kh√°c: b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu tu·∫ßn ƒë·∫ßu ti√™n c·ªßa th√°ng ƒë√≥
                        startDate = tempSelectedDate.startOf('month').startOf('week');
                      }

                      const dates = [];

                      // T·∫°o 6 tu·∫ßn (42 ng√†y) ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß calendar
                      for (let i = 0; i < 42; i++) {
                        const currentDate = startDate.add(i, 'day');
                        const isToday = currentDate.isSame(today, 'day');
                        const isSelected = currentDate.isSame(tempSelectedDate, 'day');
                        const isDisabled = currentDate.isBefore(today, 'day') || currentDate.isAfter(today.add(30, 'day'), 'day');
                        const isCurrentMonth = currentDate.isSame(tempSelectedDate, 'month');

                        dates.push(
                          <div
                            key={i}
                            onClick={() => {
                              if (!isDisabled) {
                                setTempSelectedDate(currentDate);
                              }
                            }}
                            className={`
                            h-8 sm:h-10 md:h-12 flex items-center justify-center text-xs sm:text-sm cursor-pointer rounded-lg transition-all
                            ${isSelected ? 'bg-[#FE6900] text-white font-semibold' : ''}
                            ${isToday && !isSelected ? 'bg-orange-100 text-[#FE6900] font-semibold border-2 border-[#FE6900]' : ''}
                            ${isDisabled ? 'text-gray-300 cursor-not-allowed' : 'hover:bg-orange-50'}
                            ${!isCurrentMonth && !isDisabled ? 'text-gray-400' : ''}
                            ${!isSelected && !isToday && !isDisabled && isCurrentMonth ? 'text-gray-700' : ''}
                          `}
                          >
                            {currentDate.date()}
                          </div>
                        );
                      }

                      return dates;
                    })()}
                  </div>
                </div>

                {/* Buttons responsive */}
                <div className="flex flex-col sm:flex-row justify-end gap-3 mt-6">
                  <Button
                    onClick={() => {
                      setShowCalendar(false);
                      setTempSelectedDate(selectedDate); // Reset v·ªÅ ng√†y ƒë√£ ch·ªçn
                    }}
                    className="w-full sm:w-auto"
                  >
                    H·ªßy
                  </Button>
                  <Button
                    type="primary"
                    onClick={() => {
                      setSelectedDate(tempSelectedDate);
                      setShowCalendar(false);
                    }}
                    className="w-full sm:w-auto bg-[#FE6900] hover:bg-[#E55A00] border-[#FE6900] hover:border-[#E55A00]"
                  >
                    Ch·ªçn ng√†y n√†y
                  </Button>
                </div>

                <div className="mt-4 p-3 md:p-4 bg-orange-50 rounded-lg">
                  <div className="text-sm md:text-base text-[#FE6900] font-medium">
                    üìã Quy ƒë·ªãnh ƒë·∫∑t s√¢n:
                  </div>
                  <div className="text-xs sm:text-sm text-orange-700 mt-1">
                    ‚Ä¢ Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t s√¢n t·ª´ h√¥m nay ƒë·∫øn t·ªëi ƒëa 30 ng√†y t·ªõi (<strong>{dayjs().add(30, 'day').format('DD/MM/YYYY')}</strong>)
                  </div>
                </div>
              </div>
            )}

            {/* B·ªô l·ªçc lo·∫°i s√¢n responsive */}
            <div className="bg-white p-4 md:p-6 rounded-xl shadow-sm border border-gray-200 mb-6">
              <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
                <div className="flex items-center gap-2">
                  <FilterOutlined className="text-[#FE6900] text-lg" />
                  <span className="font-semibold text-gray-800">L·ªçc theo lo·∫°i s√¢n:</span>
                </div>
                <div className="flex gap-2 md:gap-3 flex-wrap w-full sm:w-auto">
                  <Tag
                    color={selectedFieldType === "all" ? "orange" : "default"}
                    className={`cursor-pointer px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium hover:scale-105 transition-all duration-200 ${selectedFieldType === "all"
                      ? 'bg-[#FE6900] text-white border-[#FE6900]'
                      : 'bg-gray-100 text-gray-600 hover:bg-orange-50 hover:text-[#FE6900] hover:border-[#FE6900]'
                      }`}
                    onClick={() => setSelectedFieldType("all")}
                  >
                    T·∫•t c·∫£
                  </Tag>
                  <Tag
                    color={selectedFieldType === "5v5" ? "orange" : "default"}
                    className={`cursor-pointer px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium hover:scale-105 transition-all duration-200 ${selectedFieldType === "5v5"
                      ? 'bg-[#FE6900] text-white border-[#FE6900]'
                      : 'bg-gray-100 text-gray-600 hover:bg-orange-50 hover:text-[#FE6900] hover:border-[#FE6900]'
                      }`}
                    onClick={() => setSelectedFieldType("5v5")}
                  >
                    S√¢n 5
                  </Tag>
                  <Tag
                    color={selectedFieldType === "7v7" ? "orange" : "default"}
                    className={`cursor-pointer px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium hover:scale-105 transition-all duration-200 ${selectedFieldType === "7v7"
                      ? 'bg-[#FE6900] text-white border-[#FE6900]'
                      : 'bg-gray-100 text-gray-600 hover:bg-orange-50 hover:text-[#FE6900] hover:border-[#FE6900]'
                      }`}
                    onClick={() => setSelectedFieldType("7v7")}
                  >
                    S√¢n 7
                  </Tag>
                  <Tag
                    color={selectedFieldType === "22" ? "orange" : "default"}
                    className={`cursor-pointer px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium hover:scale-105 transition-all duration-200 ${selectedFieldType === "22"
                      ? 'bg-[#FE6900] text-white border-[#FE6900]'
                      : 'bg-gray-100 text-gray-600 hover:bg-orange-50 hover:text-[#FE6900] hover:border-[#FE6900]'
                      }`}
                    onClick={() => setSelectedFieldType("22")}
                  >
                    S√¢n 11
                  </Tag>
                </div>
              </div>
            </div>

            {/* Danh s√°ch s√¢n responsive */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4 md:p-6">
              <div className="text-center mb-6">
                <h2 className="text-xl md:text-2xl font-bold text-gray-800 mb-2">
                  Danh s√°ch s√¢n ({selectedDate.format("DD/MM/YYYY")})
                </h2>
              </div>
              {data &&
                <div className="space-y-4">
                  {getFilteredFields().map((field: Field, index: number) => (
                    <div key={index + 1} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                      <Collapse
                        className="border-none"
                        items={[
                          {
                            key: field._id,
                            label: (
                              <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                  <div className="flex items-center gap-3">
                                    <span className="font-semibold text-gray-800 text-base md:text-lg leading-none">{field.name}</span>
                                    <span className={`text-xs md:text-sm px-2 py-1 rounded-full leading-none ${field.status === 'B·∫£o tr√¨'
                                      ? ' text-red-600'
                                      : ' text-green-600'
                                      }`}>
                                      {field.status}
                                    </span>
                                  </div>
                                </div>

                                <span className="text-xs text-gray-500 leading-none">
                                  {field.people} ng∆∞·ªùi
                                </span>
                              </div>
                            ),
                            children:
                              <div className="p-4">
                                {field.status === 'B·∫£o tr√¨' ? (
                                  <div className="text-center py-8">
                                    <div className="text-4xl mb-2">üîß</div>
                                    <p className="text-gray-500 font-medium">S√¢n n√†y hi·ªán ƒëang b·∫£o tr√¨, kh√¥ng th·ªÉ ƒë·∫∑t l·ªãch.</p>
                                  </div>
                                ) : (
                                  timeslots && timeslots.length > 0 ? (
                                    <div>
                                      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2">
                                        {timeslots.map((slot: TimeSlot, idx) => (
                                          <Button
                                            key={idx}
                                            // Thay ƒë·ªïi t·ª´ bookings.some sang orders.some
                                            disabled={orders.length > 0 && orders.some(
                                              (o: Order) =>
                                                o.date === selectedDate.format('DD-MM-YYYY') &&
                                                o.fieldName === field.name &&
                                                o.timeStart === slot.time &&
                                                o.paymentStatus === "success"
                                            )}
                                            className={`
                                          px-3 py-2 m-1 rounded-lg text-sm font-medium transition-all duration-200
                                          ${orders.length > 0 && orders.some(
                                              (o: Order) =>
                                                o.date === selectedDate.format('DD-MM-YYYY') &&
                                                o.fieldName === field.name &&
                                                o.timeStart === slot.time &&
                                                o.paymentStatus === "success"
                                            )
                                                ? 'bg-gray-200 text-gray-400 cursor-not-allowed border-gray-200'
                                                : 'bg-white border-[#FE6900]  text-[#FE6900] hover:bg-[#FE6900] hover:text-white border-1'
                                              }
                                        `}
                                          >
                                            <Link href={`/homepage/datSan/${field._id}/${slot._id}?date=${selectedDate.format("DD-MM-YYYY")}`}>
                                              {slot.time}
                                            </Link>
                                          </Button>
                                        ))}
                                      </div>
                                    </div>
                                  ) : (
                                    <div className="text-center py-8">
                                      <div className="text-4xl mb-2">‚è∞</div>
                                      <p className="text-gray-500 font-medium">Kh√¥ng c√≥ ca ƒë√° trong ng√†y n√†y.</p>
                                    </div>
                                  )
                                )}
                              </div>,
                          }

                        ]}
                      />
                    </div>
                  ))}
                </div>
              }
            </div>
          </div>

          {/* Ph·∫ßn b√™n ph·∫£i - Th√¥ng tin b·ªï sung responsive */}
          <div className="w-full lg:w-1/3 space-y-6">
            {/* Th√¥ng tin s√¢n b√≥ng */}
            <Card
              title={
                <div className="flex items-center gap-2">
                  <span className="text-lg font-semibold">Th√¥ng tin s√¢n b√≥ng</span>
                </div>
              }
              className="shadow-sm border border-gray-200 rounded-xl overflow-hidden mb-6"
              cover={
                <div className="relative">
                  <img
                    alt="stadium"
                    src={footballField?.image}
                    className="h-40 sm:h-48 md:h-56 w-full object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                </div>
              }
            >
              <div className="space-y-3">
                <h2 className="text-lg md:text-xl font-bold text-gray-800">{footballField?.name}</h2>
                <div className="space-y-2">
                  <p className="text-gray-600 flex items-start gap-2 text-sm">
                    <EnvironmentOutlined className="text-[#FE6900] mt-0.5 flex-shrink-0" />
                    <span>
                      {footballField?.address && `${footballField.address?.detail ? `${footballField.address.detail}, ` : ""} ${footballField.address.ward}, ${footballField.address.district}, ${footballField.address.province}`}
                    </span>
                  </p>
                  <p className="text-gray-600 flex items-center gap-2 text-sm">
                    <PhoneOutlined className="text-[#FE6900]" />
                    <span>{footballField?.phone}</span>
                  </p>
                </div>
                <Link href={`/homepage/datSan/${footballField?._id}/detail`}>
                  <Button
                    type="primary"
                    className="mt-4 w-full h-10 rounded-lg font-medium"
                    style={{
                      backgroundColor: '#FE6900',
                    }}
                  >

                    üìã Xem chi ti·∫øt s√¢n

                  </Button>
                </Link>
              </div>
            </Card>

            {/* H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n */}
            <Card
              title={
                <div className="flex items-center gap-2">
                  <span className="text-lg font-semibold">üìã H∆∞·ªõng d·∫´n ƒë·∫∑t s√¢n</span>
                </div>
              }
              className="shadow-sm border border-gray-200 rounded-xl mb-6"
            >
              <ol className="list-decimal pl-4 space-y-3 text-sm md:text-base">
                <li className="text-gray-700">
                  <span className="font-medium">Ch·ªçn ng√†y</span> b·∫°n mu·ªën ƒë·∫∑t s√¢n
                </li>
                <li className="text-gray-700">
                  <span className="font-medium">Ch·ªçn s√¢n ph√π h·ª£p</span> t·ª´ danh s√°ch
                </li>
                <li className="text-gray-700">
                  <span className="font-medium">Ch·ªçn khung gi·ªù</span> c√≤n tr·ªëng
                </li>
                <li className="text-gray-700">
                  <span className="font-medium">ƒêi·ªÅn th√¥ng tin</span> v√† thanh to√°n
                </li>
                <li className="text-gray-700">
                  <span className="font-medium">Nh·∫≠n x√°c nh·∫≠n</span> ƒë·∫∑t s√¢n qua email
                </li>
              </ol>
            </Card>

            {/* Th·ªëng k√™ */}
            <Card
              title={
                <div className="flex items-center gap-2">
                  <span className="text-lg font-semibold">üìä Th·ªëng k√™</span>
                </div>
              }
              className="shadow-sm border border-gray-200 rounded-xl"
            >
              <div className="space-y-3">
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-gray-600 text-sm">üèüÔ∏è T·ªïng s·ªë s√¢n:</span>
                  <span className="font-bold text-[#FE6900] text-lg">{data?.length || 0}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-gray-600 text-sm">üëÅÔ∏è S√¢n hi·ªÉn th·ªã:</span>
                  <span className="font-bold text-[#FE6900] text-lg">{getFilteredFields()?.length || 0}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                  <span className="text-gray-600 text-sm">‚è∞ Khung gi·ªù c√≥ s·∫µn:</span>
                  <span className="font-bold text-[#FE6900] text-lg">{timeslots?.length || 0}</span>
                </div>
                <div className="flex justify-between items-center p-3 bg-orange-50 rounded-lg">
                  <span className="text-gray-600 text-sm">‚úÖ ƒê√£ ƒë·∫∑t h√¥m nay:</span>
                  <span className="font-bold text-[#FE6900] text-lg">
                    {orders.length > 0 && orders?.filter((o: Order) =>
                      o.date === dayjs().format('DD-MM-YYYY') &&
                      o.paymentStatus === "success"
                    )?.length || 0}
                  </span>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};


export default Detail;
